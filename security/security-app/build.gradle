buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
	}
}

apply plugin: 'docker'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'

repositories {
	mavenCentral()
	mavenLocal()
}


ext {
	springCloudVersion = 'Edgware.RELEASE'
}

jar {
	baseName = 'security'
}

configurations {
	providedRuntime
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.3.5.RELEASE'
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compile project(':security-common')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-starter-eureka')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('io.jsonwebtoken:jjwt:0.9.0')
	compile('org.aspectj:aspectjweaver:1.8.13')
	compile test_libs.groovy

	testCompile test_libs.spock
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

task image(type: Docker, dependsOn: build ) {
	applicationName = jar.baseName
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into "${stageDir}/target"

		}
	}
}

task publishImage(type: Docker, dependsOn: build ) {
	applicationName = jar.baseName
	push = true
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into "${stageDir}/target"

		}
	}
}